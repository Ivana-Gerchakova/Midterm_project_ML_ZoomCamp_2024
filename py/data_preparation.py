# -*- coding: utf-8 -*-
"""Project 12.11.24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ncPLUke6sM0GPQs_DRLpUcsbXdosQZMr

### MIDTERM PROJECT

### LIBRARIES :
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction import DictVectorizer
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import xgboost as xgb
from prettytable import PrettyTable
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import cross_val_score
from xgboost import XGBRegressor
from sklearn.ensemble import GradientBoostingRegressor

"""### READ THE DATASET :"""

df = pd.read_csv('New York City Airbnb.csv')
df.head()

df.tail()

"""### EDA"""

df.info()

"""### MISSING VALUES"""

df.isnull().sum()

"""### HANDLING COLUMNS WITH MISSING VALUES"""

unique_reviews_df = pd.DataFrame(df['reviews_per_month'].unique(), columns=['unique_reviews_per_month'])

print(unique_reviews_df)

median_value = df['reviews_per_month'].median()

df['reviews_per_month'] = df['reviews_per_month'].fillna(median_value)

"""### DROPPING UNNECESSARY COLUMNS"""

df.drop(columns=['name','host_id', 'host_name', 'last_review'], inplace=True)

df.duplicated().sum()

### TRAIN/VALIDATION/TEST SPLIT"""

df_temp, df_test = train_test_split(df, test_size=0.2, random_state=1)
df_train, df_val = train_test_split(df_temp, test_size=0.25, random_state=1)

df_train.reset_index(drop=True, inplace=True)
df_val.reset_index(drop=True, inplace=True)
df_test.reset_index(drop=True, inplace=True)

target_train = df_train['price'].values
target_validation = df_val['price'].values
target_test = df_test['price'].values

df_train.drop(columns=['price'], inplace=True)
df_val.drop(columns=['price'], inplace=True)
df_test.drop(columns=['price'], inplace=True)
